// Copyright (c) 2012-2018 The Bitcoin Core developers
// Distributed under the MIT software license, see the accompanying
// file COPYING or http://www.opensource.org/licenses/mit-license.php.

#include <bloom.h>

#include <clientversion.h>
#include <key.h>
#include <key_io.h>
#include <merkleblock.h>
#include <primitives/block.h>
#include <random.h>
#include <serialize.h>
#include <streams.h>
#include <uint256.h>
#include <util/system.h>
#include <util/strencodings.h>
#include <test/test_bitcoin.h>

#include <vector>

#include <boost/test/unit_test.hpp>

BOOST_FIXTURE_TEST_SUITE(bloom_tests, BasicTestingSetup)

BOOST_AUTO_TEST_CASE(bloom_create_insert_serialize)
{
    CBloomFilter filter(3, 0.01, 0, BLOOM_UPDATE_ALL);

    filter.insert(ParseHex("99108ad8ed9bb6274d3980bab5a85c048f0950c8"));
    BOOST_CHECK_MESSAGE( filter.contains(ParseHex("99108ad8ed9bb6274d3980bab5a85c048f0950c8")), "Bloom filter doesn't contain just-inserted object!");
    // One bit different in first byte
    BOOST_CHECK_MESSAGE(!filter.contains(ParseHex("19108ad8ed9bb6274d3980bab5a85c048f0950c8")), "Bloom filter contains something it shouldn't!");

    filter.insert(ParseHex("b5a2c786d9ef4658287ced5914b37a1b4aa32eee"));
    BOOST_CHECK_MESSAGE(filter.contains(ParseHex("b5a2c786d9ef4658287ced5914b37a1b4aa32eee")), "Bloom filter doesn't contain just-inserted object (2)!");

    filter.insert(ParseHex("b9300670b4c5366e95b2699e8b18bc75e5f729c5"));
    BOOST_CHECK_MESSAGE(filter.contains(ParseHex("b9300670b4c5366e95b2699e8b18bc75e5f729c5")), "Bloom filter doesn't contain just-inserted object (3)!");

    CDataStream stream(SER_NETWORK, PROTOCOL_VERSION);
    stream << filter;

    std::vector<unsigned char> vch = ParseHex("03614e9b050000000000000001");
    std::vector<char> expected(vch.size());

    for (unsigned int i = 0; i < vch.size(); i++)
        expected[i] = (char)vch[i];

    BOOST_CHECK_EQUAL_COLLECTIONS(stream.begin(), stream.end(), expected.begin(), expected.end());

    BOOST_CHECK_MESSAGE( filter.contains(ParseHex("99108ad8ed9bb6274d3980bab5a85c048f0950c8")), "Bloom filter doesn't contain just-inserted object!");
    filter.clear();
    BOOST_CHECK_MESSAGE( !filter.contains(ParseHex("99108ad8ed9bb6274d3980bab5a85c048f0950c8")), "Bloom filter should be empty!");
}

BOOST_AUTO_TEST_CASE(bloom_create_insert_serialize_with_tweak)
{
    // Same test as bloom_create_insert_serialize, but we add a nTweak of 100
    CBloomFilter filter(3, 0.01, 2147483649UL, BLOOM_UPDATE_ALL);

    filter.insert(ParseHex("99108ad8ed9bb6274d3980bab5a85c048f0950c8"));
    BOOST_CHECK_MESSAGE( filter.contains(ParseHex("99108ad8ed9bb6274d3980bab5a85c048f0950c8")), "Bloom filter doesn't contain just-inserted object!");
    // One bit different in first byte
    BOOST_CHECK_MESSAGE(!filter.contains(ParseHex("19108ad8ed9bb6274d3980bab5a85c048f0950c8")), "Bloom filter contains something it shouldn't!");

    filter.insert(ParseHex("b5a2c786d9ef4658287ced5914b37a1b4aa32eee"));
    BOOST_CHECK_MESSAGE(filter.contains(ParseHex("b5a2c786d9ef4658287ced5914b37a1b4aa32eee")), "Bloom filter doesn't contain just-inserted object (2)!");

    filter.insert(ParseHex("b9300670b4c5366e95b2699e8b18bc75e5f729c5"));
    BOOST_CHECK_MESSAGE(filter.contains(ParseHex("b9300670b4c5366e95b2699e8b18bc75e5f729c5")), "Bloom filter doesn't contain just-inserted object (3)!");

    CDataStream stream(SER_NETWORK, PROTOCOL_VERSION);
    stream << filter;

    std::vector<unsigned char> vch = ParseHex("03ce4299050000000100008001");
    std::vector<char> expected(vch.size());

    for (unsigned int i = 0; i < vch.size(); i++)
        expected[i] = (char)vch[i];

    BOOST_CHECK_EQUAL_COLLECTIONS(stream.begin(), stream.end(), expected.begin(), expected.end());
}

BOOST_AUTO_TEST_CASE(bloom_create_insert_key)
{
    std::string strSecret = std::string("Pr9a7x48SyiPsgVo1MkxqFo7BNtwoFqwRcRewbxzPSjsRd3g3NEW");
    CKey key = DecodeSecret(strSecret);
    CPubKey pubkey = key.GetPubKey();
    std::vector<unsigned char> vchPubKey(pubkey.begin(), pubkey.end());

    CBloomFilter filter(2, 0.001, 0, BLOOM_UPDATE_ALL);
    filter.insert(vchPubKey);
    uint160 hash = pubkey.GetID();
    filter.insert(std::vector<unsigned char>(hash.begin(), hash.end()));

    CDataStream stream(SER_NETWORK, PROTOCOL_VERSION);
    stream << filter;

    std::vector<unsigned char> vch = ParseHex("03d499c7080000000000000001");
    std::vector<char> expected(vch.size());

    for (unsigned int i = 0; i < vch.size(); i++)
        expected[i] = (char)vch[i];

    BOOST_CHECK_EQUAL_COLLECTIONS(stream.begin(), stream.end(), expected.begin(), expected.end());
}

BOOST_AUTO_TEST_CASE(bloom_match)
{
    // Random real transaction (a41116ecfb466ca1df58c4f8c428d86c20e02ed859e27d40172de8ff810abbb9)
    CDataStream stream(ParseHex("01000000012134fd572b79e2d3657862dde654a1ccb149887ee5d577600ee4d2986695d224010000006a473044022074bc105e27ab462ad7faf919f50be2d9aba66be4fbe5499ffcc75419d17c4e27022057389ea4bcc44855fd0c2049cfca5aeb8817ef26cc9c33a57fc741ef1183626c012102fdc596855e2fcdcdc23d798e00c555726aaece8e85e1178237564af3ae4eaafbffffffff02ae4ba97a6f0700001976a9141617f86512c72526c0cde953dc43bf5fd41ded2088ac00ca9a3b000000001976a9149c5781278b716c047ee60e5a3f29a98f55c5ef3f88ac00000000"), SER_DISK, CLIENT_VERSION);
    CTransaction tx(deserialize, stream);

    // and one which spends it (ba8bab5303670ce9c9b658a13deae33933e1d7a1c84c0d7f541fbd3f83e11695)
    CDataStream spendStream(ParseHex(""), SER_DISK, CLIENT_VERSION);
    CTransaction spendingTx(deserialize, spendStream);

    CBloomFilter filter(10, 0.000001, 0, BLOOM_UPDATE_ALL);
    filter.insert(uint256S("0xa41116ecfb466ca1df58c4f8c428d86c20e02ed859e27d40172de8ff810abbb9"));
    BOOST_CHECK_MESSAGE(filter.IsRelevantAndUpdate(tx), "Simple Bloom filter didn't match tx hash");

    filter = CBloomFilter(10, 0.000001, 0, BLOOM_UPDATE_ALL);
    // byte-reversed tx hash
    filter.insert(ParseHex("b9bb0a81ffe82d17407de259d82ee0206cd828c4f8c458dfa16c46fbec1611a4"));
    BOOST_CHECK_MESSAGE(filter.IsRelevantAndUpdate(tx), "Simple Bloom filter didn't match manually serialized tx hash");

    filter = CBloomFilter(10, 0.000001, 0, BLOOM_UPDATE_ALL);
    filter.insert(ParseHex("3044022074bc105e27ab462ad7faf919f50be2d9aba66be4fbe5499ffcc75419d17c4e27022057389ea4bcc44855fd0c2049cfca5aeb8817ef26cc9c33a57fc741ef1183626c01"));
    BOOST_CHECK_MESSAGE(filter.IsRelevantAndUpdate(tx), "Simple Bloom filter didn't match input signature");

    filter = CBloomFilter(10, 0.000001, 0, BLOOM_UPDATE_ALL);
    filter.insert(ParseHex("02fdc596855e2fcdcdc23d798e00c555726aaece8e85e1178237564af3ae4eaafb"));
    BOOST_CHECK_MESSAGE(filter.IsRelevantAndUpdate(tx), "Simple Bloom filter didn't match input pub key");

    filter = CBloomFilter(10, 0.000001, 0, BLOOM_UPDATE_ALL);
    filter.insert(ParseHex("9c5781278b716c047ee60e5a3f29a98f55c5ef3f"));
    BOOST_CHECK_MESSAGE(filter.IsRelevantAndUpdate(tx), "Simple Bloom filter didn't match output address");
    BOOST_CHECK_MESSAGE(filter.IsRelevantAndUpdate(spendingTx), "Simple Bloom filter didn't add output");

    filter = CBloomFilter(10, 0.000001, 0, BLOOM_UPDATE_ALL);
    filter.insert(ParseHex("1617f86512c72526c0cde953dc43bf5fd41ded20"));
    BOOST_CHECK_MESSAGE(filter.IsRelevantAndUpdate(tx), "Simple Bloom filter didn't match output address");

    filter = CBloomFilter(10, 0.000001, 0, BLOOM_UPDATE_ALL);
    filter.insert(COutPoint(uint256S("0x24d2956698d2e40e6077d5e57e8849b1cca154e6dd627865d3e2792b57fd3421"), 1));
    BOOST_CHECK_MESSAGE(filter.IsRelevantAndUpdate(tx), "Simple Bloom filter didn't match COutPoint");

    filter = CBloomFilter(10, 0.000001, 0, BLOOM_UPDATE_ALL);
    COutPoint prevOutPoint(uint256S("0x24d2956698d2e40e6077d5e57e8849b1cca154e6dd627865d3e2792b57fd3421"), 1);
    {
        std::vector<unsigned char> data(32 + sizeof(unsigned int));
        memcpy(data.data(), prevOutPoint.hash.begin(), 32);
        memcpy(data.data()+32, &prevOutPoint.n, sizeof(unsigned int));
        filter.insert(data);
    }
    BOOST_CHECK_MESSAGE(filter.IsRelevantAndUpdate(tx), "Simple Bloom filter didn't match manually serialized COutPoint");

    filter = CBloomFilter(10, 0.000001, 0, BLOOM_UPDATE_ALL);
    filter.insert(uint256S("00000009e784f32f62ef849763d4f45b98e07ba658647343b915ff832b110436"));
    BOOST_CHECK_MESSAGE(!filter.IsRelevantAndUpdate(tx), "Simple Bloom filter matched random tx hash");

    filter = CBloomFilter(10, 0.000001, 0, BLOOM_UPDATE_ALL);
    filter.insert(ParseHex("0000006d2965547608b9e15d9032a7b9d64fa431"));
    BOOST_CHECK_MESSAGE(!filter.IsRelevantAndUpdate(tx), "Simple Bloom filter matched random address");

    filter = CBloomFilter(10, 0.000001, 0, BLOOM_UPDATE_ALL);
    filter.insert(COutPoint(uint256S("0x90c122d70786e899529d71dbeba91ba216982fb6ba58f3bdaab65e73b7e9260b"), 1));
    BOOST_CHECK_MESSAGE(!filter.IsRelevantAndUpdate(tx), "Simple Bloom filter matched COutPoint for an output we didn't care about");

    filter = CBloomFilter(10, 0.000001, 0, BLOOM_UPDATE_ALL);
    filter.insert(COutPoint(uint256S("0x000000d70786e899529d71dbeba91ba216982fb6ba58f3bdaab65e73b7e9260b"), 0));
    BOOST_CHECK_MESSAGE(!filter.IsRelevantAndUpdate(tx), "Simple Bloom filter matched COutPoint for an output we didn't care about");
}

BOOST_AUTO_TEST_CASE(merkle_block_1)
{
    CBlock block = getBlock13b8a();
    CBloomFilter filter(10, 0.000001, 0, BLOOM_UPDATE_ALL);
    // Match the last transaction
    filter.insert(uint256S("0x35dec570275a395a8a297c726ac48ad2674b1683f7e1ad5b93cc96dfe7dab94b"));

    CMerkleBlock merkleBlock(block, filter);
    BOOST_CHECK_EQUAL(merkleBlock.header.GetHash().GetHex(), block.GetHash().GetHex());

    BOOST_CHECK_EQUAL(merkleBlock.vMatchedTxn.size(), 1U);
    std::pair<unsigned int, uint256> pair = merkleBlock.vMatchedTxn[0];

    BOOST_CHECK(merkleBlock.vMatchedTxn[0].second == uint256S("0x35dec570275a395a8a297c726ac48ad2674b1683f7e1ad5b93cc96dfe7dab94b"));
    BOOST_CHECK(merkleBlock.vMatchedTxn[0].first == 8);

    std::vector<uint256> vMatched;
    std::vector<unsigned int> vIndex;
    BOOST_CHECK(merkleBlock.txn.ExtractMatches(vMatched, vIndex) == block.hashMerkleRoot);
    BOOST_CHECK(vMatched.size() == merkleBlock.vMatchedTxn.size());
    for (unsigned int i = 0; i < vMatched.size(); i++)
        BOOST_CHECK(vMatched[i] == merkleBlock.vMatchedTxn[i].second);

    // Also match the 8th transaction
    filter.insert(uint256S("0x50bd80d89cc7e00a33698deac6438d965f94e9d058d62874b0250f84e0d8ff9c"));
    merkleBlock = CMerkleBlock(block, filter);
    BOOST_CHECK(merkleBlock.header.GetHash() == block.GetHash());

    BOOST_CHECK(merkleBlock.vMatchedTxn.size() == 2);

    BOOST_CHECK(merkleBlock.vMatchedTxn[1] == pair);

    BOOST_CHECK(merkleBlock.vMatchedTxn[0].second == uint256S("0x50bd80d89cc7e00a33698deac6438d965f94e9d058d62874b0250f84e0d8ff9c"));
    BOOST_CHECK(merkleBlock.vMatchedTxn[0].first == 7);

    BOOST_CHECK(merkleBlock.txn.ExtractMatches(vMatched, vIndex) == block.hashMerkleRoot);
    BOOST_CHECK(vMatched.size() == merkleBlock.vMatchedTxn.size());
    for (unsigned int i = 0; i < vMatched.size(); i++)
        BOOST_CHECK(vMatched[i] == merkleBlock.vMatchedTxn[i].second);
}

BOOST_AUTO_TEST_CASE(merkle_block_2)
{
    // Random real mainnet block 1525 (00000026710729f8bf2e45d6ac9e9e02db4a4d4fc393b3c4ae48c330615ecae8)
    // With 13 txes
    CBlock block;
    CDataStream stream(ParseHex("03000000e680e2a6e09b4d6398bcfb723b9039d73f68aa91ddfbbc2cab8f63f243000000c7b8b35c26d3b9a744cf13116bbc362fe1e7a4a3a5e7376ca639d26695244780c86c8b592d1c6a1d22f01600000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000d01000000010000000000000000000000000000000000000000000000000000000000000000ffffffff0502f5050117ffffffff026d18c50400000000232102a82d913ffd876a0e971e4cee199901446c06a7a26d4d4e01855d501e24140cc6ac1b463101000000001976a9147d7a3cb519a73f67d17ec26f50ba575a407c822e88ac0000000001000000016f7ab10bdf75a6566da2796ffe6850b9ce407757c99deade9c0a98bbb759f08b010000006a47304402200aeee55cf0a2809b04b1f9a998de539c116a6df14517fc7b690fc289e1dc5b4602206fde2d825d1be7c2741d14411dce32c3019d0d7624f7fe74308a784e686f215b0121022557c56946dd35cd55756c9cab09e622c459c6cacf1edd76f72102442d73301effffffff0235c5f9db3a0700001976a914c96a267af2c97828ffde02e40f4f5e7a0597e72388ac00ca9a3b000000001976a9149c5781278b716c047ee60e5a3f29a98f55c5ef3f88ac000000000100000001cb9bee0fab319c23f9181625c8fec7dab23bc5161d95101ad661ba0e1eb24c17000000006a47304402207258ebd0d623d8f35da3c56ce6585472405bfbe692294b6cab3a0da2962621c302205471863a93d963b4a0cee81fbe24c302e9706328bbcc76af362cb98e16acadfb012102b7fcd79bda73b43b251398c8badd510598e710f926bbf8c74160f95ecd82e429ffffffff0200ca9a3b000000001976a914ba7fc8f8ccaa75e078961c8888e98c89213d85a888acc6f05ea03a0700001976a914545597003f4f0c31bad4c48b39949e2c953a950c88ac000000000100000001196ca11818a9d75ca3528a3b006f9749b6e5f5bf01bf46dc511204c1bcd8ffd8010000006a4730440220457a4481f566177b5bd7e78822ca22cd0d8ef9d6d80e776d53dbbf8f6560f97502206a563ab3eaad5e81659acc8a16bc4cdae7ba00da7e1c039a564abc41cebe53d40121028ef726134fb7b8a89bc5f8bb9bccde8f3e08d0fc077feb6e641228c8ba1de502ffffffff0200ca9a3b000000001976a914995f273daaa1494bbaacbe583f42d9972912829088ac571cc4643a0700001976a91437a21d7534ed7ed083491fb6917b51e77d184d1d88ac0000000001000000019eee83d604a7008f963ea0c08e5dc4cd53f45f1d3a1d7ab1b72670582d2a2cf4010000006b48304502210081efcf063092f6716f877a32ccec66a48ce05c62c04c3f21f55bedeba732fcd30220648219a29b62a7212f0a41d5cdd66897508030af81f983e8d2739399e951a446012102b3272d9bd74e3c352d160cf5358bd0f4949c9878fabf0ec68dc1bb5114d87072ffffffff02dc4729293a0700001976a91475b73d4f6bec883ab023c239132ff979971b04da88ac00ca9a3b000000001976a914ef5acbda3141f7f4cbb81775b1afa46d8dde6a6e88ac0000000001000000015e65430ff1bbfee84a7341c497ce58d992a4ca5debf32c93155080cc73d4a525000000006a47304402200a1cc352d2ac99000eac88d918ff0661a5cef345fce520c969d210d67943384a02200b1ce61152beeafe111b9741649080b67807d6874169d095cd46c714411e97cc012103c0af645b4adc08cc605333f2d7340e41c4038513f44441996aad175b54714472ffffffff0200ca9a3b000000001976a9149c5781278b716c047ee60e5a3f29a98f55c5ef3f88ac6d738eed390700001976a914f72c89043016387192c0b23e25999d32ba433eaf88ac000000000100000001e5f5b685114fbe3eaa6908b45e82fa406c8d2c36a66b062cf13801ed059dd4ac010000006b483045022100c0ec2cae6c5c7dd74bc1a058c4cf7341ddc3a174abd1da45abafaf3c74a6963502206406fee80e25e1e6233fe6aa0d41f297b34045469b949bf2aa0fdda6ef60c3b80121026d7d41aa7a413faa2e45ae35663c7099ede8d0248e4c11f77c741c3d58c2a0e0ffffffff0200ca9a3b000000001976a914ba7fc8f8ccaa75e078961c8888e98c89213d85a888acf29ef3b1390700001976a91430d0b87194a3c0a87b28d5f2cc94915d9547c09988ac000000000100000001af59a0aab44bdf92734124b0f0e919adbb56c39de2bf57b0bd48e2cd36b6fad3010000006b4830450221009d1aac067c463265397898f4e1bcba2f45cd58e58abcef74b2a07152a69a852c022002a425220d2df70ca3d2d1f7f051f12724e6e042fc55f2c884e416bbb3a6c77f0121038bcddffce8325fd4e9bec1f029f2bea10d7a614ec2ef4ec35c1086152a51643dffffffff0200ca9a3b000000001976a914995f273daaa1494bbaacbe583f42d9972912829088ac77ca5876390700001976a914ed6cc8200a1e9149eb5f75a199c1f51e78c658c288ac000000000100000001f869d14c8f2877b5c24d872931b7d77098b737d9f1dd01cf24c4fa0fc5ea795b010000006b483045022100f85226844199106902012463b2eaa3f472de5623cd65fea7290923e88a3a841a0220377ad9607b9cee41768306dcce3a23b4cbd59964f2258dac0b4387293143406c01210244d99ecbec03fdfbbcf6a3cad26c9eb9ef00d70cd684bab1010aaff3871a3ee6ffffffff02fcf5bd3a390700001976a91489f03209447529521bb2da16d5d368e9b600aefc88ac00ca9a3b000000001976a914ef5acbda3141f7f4cbb81775b1afa46d8dde6a6e88ac000000000100000001d5cc4a318abb78cfd9edb886330121afadc93410a8553db029734297d6cd33ee000000006b483045022100b4e1a0346bc5fa84822376bb8870ad03f768d35e3dfc6224e90217b9843bed4b022029edf8cb89442702914aeeca95c025e0e5a7b2d2cbbd98792966f2e5cb612ef0012103544416963ed248c47064c33735a7f8059179428c838428d806843758cd434fcbffffffff02812123ff380700001976a9145162e0eba3e08b4779d75e33b148dd943281d6f888ac00ca9a3b000000001976a9149c5781278b716c047ee60e5a3f29a98f55c5ef3f88ac0000000001000000014ea199d9749376bcc90cc715272dab149db470f899f22184c07932f006d70afc000000006a473044022048a3ad9d71e3b4c6b710662b686994bfccaa44978da1e5e1e9dcee17665560660220032747e6e170de8b3b8cbb39ecb7d9cfe3d9ba56a869f28a1aac0e5d2498034e0121039136901122d97dfaeccee71ddae7f2fd61ebcc8ad907f02b936ac3e65d146798ffffffff0200ca9a3b000000001976a914ba7fc8f8ccaa75e078961c8888e98c89213d85a888ac124d88c3380700001976a91437d2914a64b7e142e6798a29ec0cae7bc06883f388ac000000000100000001374b15805ae985ac1c5be3a79b4ba326d39565786e260f49c236161030f1ac5a010000006a47304402207838658626306701bb2848917c74df3dff533751123075ba5510e3b29c7042e602202187a83b0a4db8d28d968a258159e570757edddd2de6be516dec5827d783c442012102c62ed70f45eb9f92850c6dacb9168e32b60660499da599fa9a46902d8454276cffffffff02a378ed87380700001976a9146f6abd23be328135d21773bf42db48a0b2c425d288ac00ca9a3b000000001976a914995f273daaa1494bbaacbe583f42d9972912829088ac0000000001000000017ba266ebd7a3af44a58d4ce4b4b0f0ef219f8cf1c5486aa35f654d35253c7c87000000006b483045022100b2be79ea7e6e43350fee5dbd772e9360462aca3a4870a42f8b991c26d53f380702206c0e31d224fe8737eaca25944616a95228b9ee62f11149ea1933de6171e465a101210252b419d7766a408e996a68318be35c0a9bd091dfb676116d54ddb2cee6ba8c46ffffffff0228a4524c380700001976a914664fec3147bf9d2468daf25f45a4aeb8995fd3ad88ac00ca9a3b000000001976a914ef5acbda3141f7f4cbb81775b1afa46d8dde6a6e88ac00000000"), SER_NETWORK, PROTOCOL_VERSION);
    stream >> block;

    CBloomFilter filter(10, 0.000001, 0, BLOOM_UPDATE_ALL);
    // Match the first transaction
    filter.insert(uint256S("0xbe73c995150a0a34f70e94a8e8b884bfa7cb561594633e7de58f4229285c0610"));

    CMerkleBlock merkleBlock(block, filter);
    BOOST_CHECK(merkleBlock.header.GetHash() == block.GetHash());

    BOOST_CHECK(merkleBlock.vMatchedTxn.size() == 1);
    std::pair<unsigned int, uint256> pair = merkleBlock.vMatchedTxn[0];

    BOOST_CHECK(merkleBlock.vMatchedTxn[0].second == uint256S("0xbe73c995150a0a34f70e94a8e8b884bfa7cb561594633e7de58f4229285c0610"));
    BOOST_CHECK(merkleBlock.vMatchedTxn[0].first == 0);

    std::vector<uint256> vMatched;
    std::vector<unsigned int> vIndex;
    BOOST_CHECK(merkleBlock.txn.ExtractMatches(vMatched, vIndex) == block.hashMerkleRoot);
    BOOST_CHECK(vMatched.size() == merkleBlock.vMatchedTxn.size());
    for (unsigned int i = 0; i < vMatched.size(); i++)
        BOOST_CHECK(vMatched[i] == merkleBlock.vMatchedTxn[i].second);

    // Match an output from the second transaction (the pubkey for address Bi3Lqfndi8obPZQ85PjyVb7AWRN2QEAbdP)
    // This should match the fifth transaction because it spends the output matched
    // It also matches the ninth transaction, which spends to the pubkey again
    filter.insert(ParseHex("9c5781278b716c047ee60e5a3f29a98f55c5ef3f"));

    merkleBlock = CMerkleBlock(block, filter);
    BOOST_CHECK(merkleBlock.header.GetHash() == block.GetHash());

    BOOST_CHECK(merkleBlock.vMatchedTxn.size() == 4);

    BOOST_CHECK(pair == merkleBlock.vMatchedTxn[0]);

    BOOST_CHECK(merkleBlock.vMatchedTxn[1].second == uint256S("0x174cb21e0eba61d61a10951d16c53bb2dac7fec8251618f9239c31ab0fee9bcb"));
    BOOST_CHECK(merkleBlock.vMatchedTxn[1].first == 1);

    BOOST_CHECK(merkleBlock.vMatchedTxn[2].second == uint256S("0xacd49d05ed0138f12c066ba6362c8d6c40fa825eb40869aa3ebe4f1185b6f5e5"));
    BOOST_CHECK(merkleBlock.vMatchedTxn[2].first == 5);

    BOOST_CHECK(merkleBlock.vMatchedTxn[3].second == uint256S("0xfc0ad706f03279c08421f299f870b49d14ab2d2715c70cc9bc769374d999a14e"));
    BOOST_CHECK(merkleBlock.vMatchedTxn[3].first == 9);

    BOOST_CHECK(merkleBlock.txn.ExtractMatches(vMatched, vIndex) == block.hashMerkleRoot);
    BOOST_CHECK(vMatched.size() == merkleBlock.vMatchedTxn.size());
    for (unsigned int i = 0; i < vMatched.size(); i++)
        BOOST_CHECK(vMatched[i] == merkleBlock.vMatchedTxn[i].second);
}

BOOST_AUTO_TEST_CASE(merkle_block_2_with_update_none)
{
    // Random real mainnet block 1525 (00000026710729f8bf2e45d6ac9e9e02db4a4d4fc393b3c4ae48c330615ecae8)
    // With 13 txes
    CBlock block;
    CDataStream stream(ParseHex("03000000e680e2a6e09b4d6398bcfb723b9039d73f68aa91ddfbbc2cab8f63f243000000c7b8b35c26d3b9a744cf13116bbc362fe1e7a4a3a5e7376ca639d26695244780c86c8b592d1c6a1d22f01600000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000d01000000010000000000000000000000000000000000000000000000000000000000000000ffffffff0502f5050117ffffffff026d18c50400000000232102a82d913ffd876a0e971e4cee199901446c06a7a26d4d4e01855d501e24140cc6ac1b463101000000001976a9147d7a3cb519a73f67d17ec26f50ba575a407c822e88ac0000000001000000016f7ab10bdf75a6566da2796ffe6850b9ce407757c99deade9c0a98bbb759f08b010000006a47304402200aeee55cf0a2809b04b1f9a998de539c116a6df14517fc7b690fc289e1dc5b4602206fde2d825d1be7c2741d14411dce32c3019d0d7624f7fe74308a784e686f215b0121022557c56946dd35cd55756c9cab09e622c459c6cacf1edd76f72102442d73301effffffff0235c5f9db3a0700001976a914c96a267af2c97828ffde02e40f4f5e7a0597e72388ac00ca9a3b000000001976a9149c5781278b716c047ee60e5a3f29a98f55c5ef3f88ac000000000100000001cb9bee0fab319c23f9181625c8fec7dab23bc5161d95101ad661ba0e1eb24c17000000006a47304402207258ebd0d623d8f35da3c56ce6585472405bfbe692294b6cab3a0da2962621c302205471863a93d963b4a0cee81fbe24c302e9706328bbcc76af362cb98e16acadfb012102b7fcd79bda73b43b251398c8badd510598e710f926bbf8c74160f95ecd82e429ffffffff0200ca9a3b000000001976a914ba7fc8f8ccaa75e078961c8888e98c89213d85a888acc6f05ea03a0700001976a914545597003f4f0c31bad4c48b39949e2c953a950c88ac000000000100000001196ca11818a9d75ca3528a3b006f9749b6e5f5bf01bf46dc511204c1bcd8ffd8010000006a4730440220457a4481f566177b5bd7e78822ca22cd0d8ef9d6d80e776d53dbbf8f6560f97502206a563ab3eaad5e81659acc8a16bc4cdae7ba00da7e1c039a564abc41cebe53d40121028ef726134fb7b8a89bc5f8bb9bccde8f3e08d0fc077feb6e641228c8ba1de502ffffffff0200ca9a3b000000001976a914995f273daaa1494bbaacbe583f42d9972912829088ac571cc4643a0700001976a91437a21d7534ed7ed083491fb6917b51e77d184d1d88ac0000000001000000019eee83d604a7008f963ea0c08e5dc4cd53f45f1d3a1d7ab1b72670582d2a2cf4010000006b48304502210081efcf063092f6716f877a32ccec66a48ce05c62c04c3f21f55bedeba732fcd30220648219a29b62a7212f0a41d5cdd66897508030af81f983e8d2739399e951a446012102b3272d9bd74e3c352d160cf5358bd0f4949c9878fabf0ec68dc1bb5114d87072ffffffff02dc4729293a0700001976a91475b73d4f6bec883ab023c239132ff979971b04da88ac00ca9a3b000000001976a914ef5acbda3141f7f4cbb81775b1afa46d8dde6a6e88ac0000000001000000015e65430ff1bbfee84a7341c497ce58d992a4ca5debf32c93155080cc73d4a525000000006a47304402200a1cc352d2ac99000eac88d918ff0661a5cef345fce520c969d210d67943384a02200b1ce61152beeafe111b9741649080b67807d6874169d095cd46c714411e97cc012103c0af645b4adc08cc605333f2d7340e41c4038513f44441996aad175b54714472ffffffff0200ca9a3b000000001976a9149c5781278b716c047ee60e5a3f29a98f55c5ef3f88ac6d738eed390700001976a914f72c89043016387192c0b23e25999d32ba433eaf88ac000000000100000001e5f5b685114fbe3eaa6908b45e82fa406c8d2c36a66b062cf13801ed059dd4ac010000006b483045022100c0ec2cae6c5c7dd74bc1a058c4cf7341ddc3a174abd1da45abafaf3c74a6963502206406fee80e25e1e6233fe6aa0d41f297b34045469b949bf2aa0fdda6ef60c3b80121026d7d41aa7a413faa2e45ae35663c7099ede8d0248e4c11f77c741c3d58c2a0e0ffffffff0200ca9a3b000000001976a914ba7fc8f8ccaa75e078961c8888e98c89213d85a888acf29ef3b1390700001976a91430d0b87194a3c0a87b28d5f2cc94915d9547c09988ac000000000100000001af59a0aab44bdf92734124b0f0e919adbb56c39de2bf57b0bd48e2cd36b6fad3010000006b4830450221009d1aac067c463265397898f4e1bcba2f45cd58e58abcef74b2a07152a69a852c022002a425220d2df70ca3d2d1f7f051f12724e6e042fc55f2c884e416bbb3a6c77f0121038bcddffce8325fd4e9bec1f029f2bea10d7a614ec2ef4ec35c1086152a51643dffffffff0200ca9a3b000000001976a914995f273daaa1494bbaacbe583f42d9972912829088ac77ca5876390700001976a914ed6cc8200a1e9149eb5f75a199c1f51e78c658c288ac000000000100000001f869d14c8f2877b5c24d872931b7d77098b737d9f1dd01cf24c4fa0fc5ea795b010000006b483045022100f85226844199106902012463b2eaa3f472de5623cd65fea7290923e88a3a841a0220377ad9607b9cee41768306dcce3a23b4cbd59964f2258dac0b4387293143406c01210244d99ecbec03fdfbbcf6a3cad26c9eb9ef00d70cd684bab1010aaff3871a3ee6ffffffff02fcf5bd3a390700001976a91489f03209447529521bb2da16d5d368e9b600aefc88ac00ca9a3b000000001976a914ef5acbda3141f7f4cbb81775b1afa46d8dde6a6e88ac000000000100000001d5cc4a318abb78cfd9edb886330121afadc93410a8553db029734297d6cd33ee000000006b483045022100b4e1a0346bc5fa84822376bb8870ad03f768d35e3dfc6224e90217b9843bed4b022029edf8cb89442702914aeeca95c025e0e5a7b2d2cbbd98792966f2e5cb612ef0012103544416963ed248c47064c33735a7f8059179428c838428d806843758cd434fcbffffffff02812123ff380700001976a9145162e0eba3e08b4779d75e33b148dd943281d6f888ac00ca9a3b000000001976a9149c5781278b716c047ee60e5a3f29a98f55c5ef3f88ac0000000001000000014ea199d9749376bcc90cc715272dab149db470f899f22184c07932f006d70afc000000006a473044022048a3ad9d71e3b4c6b710662b686994bfccaa44978da1e5e1e9dcee17665560660220032747e6e170de8b3b8cbb39ecb7d9cfe3d9ba56a869f28a1aac0e5d2498034e0121039136901122d97dfaeccee71ddae7f2fd61ebcc8ad907f02b936ac3e65d146798ffffffff0200ca9a3b000000001976a914ba7fc8f8ccaa75e078961c8888e98c89213d85a888ac124d88c3380700001976a91437d2914a64b7e142e6798a29ec0cae7bc06883f388ac000000000100000001374b15805ae985ac1c5be3a79b4ba326d39565786e260f49c236161030f1ac5a010000006a47304402207838658626306701bb2848917c74df3dff533751123075ba5510e3b29c7042e602202187a83b0a4db8d28d968a258159e570757edddd2de6be516dec5827d783c442012102c62ed70f45eb9f92850c6dacb9168e32b60660499da599fa9a46902d8454276cffffffff02a378ed87380700001976a9146f6abd23be328135d21773bf42db48a0b2c425d288ac00ca9a3b000000001976a914995f273daaa1494bbaacbe583f42d9972912829088ac0000000001000000017ba266ebd7a3af44a58d4ce4b4b0f0ef219f8cf1c5486aa35f654d35253c7c87000000006b483045022100b2be79ea7e6e43350fee5dbd772e9360462aca3a4870a42f8b991c26d53f380702206c0e31d224fe8737eaca25944616a95228b9ee62f11149ea1933de6171e465a101210252b419d7766a408e996a68318be35c0a9bd091dfb676116d54ddb2cee6ba8c46ffffffff0228a4524c380700001976a914664fec3147bf9d2468daf25f45a4aeb8995fd3ad88ac00ca9a3b000000001976a914ef5acbda3141f7f4cbb81775b1afa46d8dde6a6e88ac00000000"), SER_NETWORK, PROTOCOL_VERSION);
    stream >> block;

    CBloomFilter filter(10, 0.000001, 0, BLOOM_UPDATE_NONE);
    // Match the first transaction
    filter.insert(uint256S("0xbe73c995150a0a34f70e94a8e8b884bfa7cb561594633e7de58f4229285c0610"));

    CMerkleBlock merkleBlock(block, filter);
    BOOST_CHECK(merkleBlock.header.GetHash() == block.GetHash());

    BOOST_CHECK(merkleBlock.vMatchedTxn.size() == 1);
    std::pair<unsigned int, uint256> pair = merkleBlock.vMatchedTxn[0];

    BOOST_CHECK(merkleBlock.vMatchedTxn[0].second == uint256S("0xbe73c995150a0a34f70e94a8e8b884bfa7cb561594633e7de58f4229285c0610"));
    BOOST_CHECK(merkleBlock.vMatchedTxn[0].first == 0);

    std::vector<uint256> vMatched;
    std::vector<unsigned int> vIndex;
    BOOST_CHECK(merkleBlock.txn.ExtractMatches(vMatched, vIndex) == block.hashMerkleRoot);
    BOOST_CHECK(vMatched.size() == merkleBlock.vMatchedTxn.size());
    for (unsigned int i = 0; i < vMatched.size(); i++)
        BOOST_CHECK(vMatched[i] == merkleBlock.vMatchedTxn[i].second);

    // Match an output from the third transaction (the pubkey hash for address BknoNAY4mErMmv1dZziv7ctLQSTRLARgav)
    // This should not match the third transaction though it spends the output matched
    // It will match the fourth transaction, which has another pay-to-pubkey output to the same address
    filter.insert(ParseHex("ba7fc8f8ccaa75e078961c8888e98c89213d85a8"));

    merkleBlock = CMerkleBlock(block, filter);
    BOOST_CHECK(merkleBlock.header.GetHash() == block.GetHash());

    BOOST_CHECK(merkleBlock.vMatchedTxn.size() == 4);

    BOOST_CHECK(pair == merkleBlock.vMatchedTxn[0]);

    BOOST_CHECK(merkleBlock.vMatchedTxn[1].second == uint256S("0xd8ffd8bcc1041251dc46bf01bff5e5b649976f003b8a52a35cd7a91818a16c19"));
    BOOST_CHECK(merkleBlock.vMatchedTxn[1].first == 2);

    BOOST_CHECK(merkleBlock.vMatchedTxn[2].second == uint256S("0xd3fab636cde248bdb057bfe29dc356bbad19e9f0b024417392df4bb4aaa059af"));
    BOOST_CHECK(merkleBlock.vMatchedTxn[2].first == 6);

    BOOST_CHECK(merkleBlock.vMatchedTxn[3].second == uint256S("0x5aacf130101636c2490f266e786595d326a34b9ba7e35b1cac85e95a80154b37"));
    BOOST_CHECK(merkleBlock.vMatchedTxn[3].first == 10);

    BOOST_CHECK(merkleBlock.txn.ExtractMatches(vMatched, vIndex) == block.hashMerkleRoot);
    BOOST_CHECK(vMatched.size() == merkleBlock.vMatchedTxn.size());
    for (unsigned int i = 0; i < vMatched.size(); i++)
        BOOST_CHECK(vMatched[i] == merkleBlock.vMatchedTxn[i].second);
}

BOOST_AUTO_TEST_CASE(merkle_block_3_and_serialize)
{
    // Random real mainnet block 1000 (0000009d90967e8b3128906b6566eccfc5b167ed27004f6a7d998fcfcfe08ee6)
    // With one tx
    CBlock block;
    CDataStream stream(ParseHex("0300000035486cdf2b8f6621f6373d8c8287f5692a636fa0fcf7516185ef1ffc62000000c2a179fe12d4faed5cd853585aa9e0e1301f26bcb767eea4235140d38e960d79c2ec8a59d8af001e4ab60900000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000101000000010000000000000000000000000000000000000000000000000000000000000000ffffffff0502e8030109ffffffff0200b4c40400000000232102fc6a458929c9cef89de235970bca84d8353b84e70ee3fd791b8d3cc8e1d3c637ac002d3101000000001976a9147d7a3cb519a73f67d17ec26f50ba575a407c822e88ac00000000"), SER_NETWORK, PROTOCOL_VERSION);
    stream >> block;

    CBloomFilter filter(10, 0.000001, 0, BLOOM_UPDATE_ALL);
    // Match the only transaction
    filter.insert(uint256S("0x790d968ed3405123a4ee67b7bc261f30e1e0a95a5853d85cedfad412fe79a1c2"));

    CMerkleBlock merkleBlock(block, filter);
    BOOST_CHECK(merkleBlock.header.GetHash() == block.GetHash());

    BOOST_CHECK(merkleBlock.vMatchedTxn.size() == 1);

    BOOST_CHECK(merkleBlock.vMatchedTxn[0].second == uint256S("0x790d968ed3405123a4ee67b7bc261f30e1e0a95a5853d85cedfad412fe79a1c2"));
    BOOST_CHECK(merkleBlock.vMatchedTxn[0].first == 0);

    std::vector<uint256> vMatched;
    std::vector<unsigned int> vIndex;
    BOOST_CHECK(merkleBlock.txn.ExtractMatches(vMatched, vIndex) == block.hashMerkleRoot);
    BOOST_CHECK(vMatched.size() == merkleBlock.vMatchedTxn.size());
    for (unsigned int i = 0; i < vMatched.size(); i++)
        BOOST_CHECK(vMatched[i] == merkleBlock.vMatchedTxn[i].second);

    CDataStream merkleStream(SER_NETWORK, PROTOCOL_VERSION);
    merkleStream << merkleBlock;

    std::vector<unsigned char> vch = ParseHex("0300000035486cdf2b8f6621f6373d8c8287f5692a636fa0fcf7516185ef1ffc62000000c2a179fe12d4faed5cd853585aa9e0e1301f26bcb767eea4235140d38e960d79c2ec8a59d8af001e4ab60900000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000001c2a179fe12d4faed5cd853585aa9e0e1301f26bcb767eea4235140d38e960d790101");
    std::vector<char> expected(vch.size());

    for (unsigned int i = 0; i < vch.size(); i++)
        expected[i] = (char)vch[i];

    BOOST_CHECK_EQUAL_COLLECTIONS(expected.begin(), expected.end(), merkleStream.begin(), merkleStream.end());
}

BOOST_AUTO_TEST_CASE(merkle_block_4)
{
    // Random real mainnet block 1295 (0000001d3bdcc0d1fab90cb9b821353da5582585d1feeee709d999ff21320512)
    // With 13 txes
    CBlock block;
    CDataStream stream(ParseHex("03000000c762eb3b258c964658c738feea9f93db3ddefe5a1bf0f6bea19f0ccb15000000aa95233e089fc2faf0c66d370d32936a1f9a7ef28725c996c7552dc3f08334f6a7358b59aec8001e48d21400000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000d01000000010000000000000000000000000000000000000000000000000000000000000000ffffffff05020f050101ffffffff021d13c504000000002321033e254567ac5469ccf602aa8439aa3690e30c9add8ecb6f3ce055867b7eb95062acc7443101000000001976a9147d7a3cb519a73f67d17ec26f50ba575a407c822e88ac000000000100000001229c462e3e4345ae5cd46937af63b1020de36e94d898ea3afef7b6be7b2ce20d010000006a473044022016bb149bf67b03439f1b9297fb6cf980e10f616512f5ae24a6b71ad252b3372c0220662487af3fb5f7fe11b78460683b700d2375f1838788a95c1644ad28456c28bd012102404ca28ac01a9f948a34491e02e433198e83a118fbafbaa9b52db75cb4083f7fffffffff02f11567c3b20900001976a914caebdec3adf8f99d5ce8213c7adaeed90167cfb488ac00ca9a3b000000001976a9149c5781278b716c047ee60e5a3f29a98f55c5ef3f88ac0000000001000000013ce05b435e0b8f891cee3638b535b798887333fe8d091633e7d64289ab464d54000000006a473044022052948bfd09bfb4d4c36aa147e0fbb605b9c78f6348cd74347e10e9f62696ad8c022021e0f32acf0cad0af206db08e4c43b1a6bbbb9092b0fbac9265b41b159d249820121023aa9c8ae47ae6ee13ab96d2e84af785660dbc7e6e22c403b6a67b4fdd07585abffffffff020542cc87b20900001976a9143e77d120d3585c6b241494260cab1d3321f2067188ac00ca9a3b000000001976a914ba7fc8f8ccaa75e078961c8888e98c89213d85a888ac000000000100000001af1a67c2419ca63366fe6be93735dc641bd75bd9382a80de90cd47f39f305169000000006a47304402203a7898655915fd51685446d4beb8bf3658c491d5c7edfadf7f35db85b428210c02203c920bf7eff603a853c2f6fb1e380fa04d90f8feb0a6c74102b729cbaaffd39a0121021593d23c6ee5c8e88863db753747efc4fd421822d008b367e5cd11abd54123e2ffffffff0200ca9a3b000000001976a914995f273daaa1494bbaacbe583f42d9972912829088ac196e314cb20900001976a9143e0ea691e152bfe4bc7cea92df243e96f5049e4b88ac0000000001000000012ae69d3dd0dbdb03d814b6ff53fed00709ca69114a29a9f5bd445b2a25fec691010000006b48304502210092a28a1822cf72358e1ed934c38e9b728bd24edda955292a38d3082c9ea0b8a9022048db9e0c50dba465eb3a48378a5907f6c49fdda60758992b6141a0e256f892520121026de2041f3dbfb44e0eb356efd57a6110037fa766a8f55f787c4cf911a21c3083ffffffff0200ca9a3b000000001976a914ef5acbda3141f7f4cbb81775b1afa46d8dde6a6e88ac2d9a9610b20900001976a91456eedbf725b2dd72263ba2a46a5313aace7657e288ac000000000100000001f24c019b133c8733223bbb807ea01c2643d561ee82cb704134c825f00a84435d010000006a47304402206273d060d73514cfe436c6873bc2c475071c016116f276a0f677b8d04d840b1f0220533b3aa53587344b301b30dd8e9e3436e7f2bf339e9ad57ae5ff7488f000f1ec0121023e3fb614a8479eb0faee9d4c2f650611dddf2654f61322fcd754e7fe1b1ef6bcffffffff024cc6fbd4b10900001976a91447219483be4d5f601af119f305308544b1d1cf3f88ac00ca9a3b000000001976a9149c5781278b716c047ee60e5a3f29a98f55c5ef3f88ac000000000100000001c0246062f0f2f20d025ddbacea5704b302280802c0535257b1ecc28052c5e02e000000006a47304402201d37afd8b8d2babc92e9d7074a7752426511cb50a7a1699aca7409eb125ce22e0220591a24a6e532f1c5c32e5e1d88ec07eb729350f0a5d10d433fb19b243aeff23401210391b38899c04efc03346e45e1400f6a672c8b76c1602eca296de08597221f856dffffffff0200ca9a3b000000001976a914ba7fc8f8ccaa75e078961c8888e98c89213d85a888ac60f26099b10900001976a914563ce273ad9a4bbaec3724f292d13480bf4129b788ac0000000001000000012249ac508d394500cd5475d196be5f21c344412d12dd599200b365a765b15af8010000006a473044022060506da0ee97fae10b852d95cede4afb14072d144a245e9225cfa783169593fc022000b6da4ef93bcfdcd483494a042ca3c778674313ad97c64f23777b2f49c67883012102ddb4dc9fddb08390b508575158ded2ed8e342d73f4907564e368190589d67410ffffffff0200ca9a3b000000001976a914995f273daaa1494bbaacbe583f42d9972912829088ac7f1ec65db10900001976a914dd403efa39dc27282c05ae926529a1c2c9c9f2d388ac000000000100000001f1b041e4ec1772fd03318b68160406e3136317d6cef18c89ea2a20dd778bcb29010000006b483045022100a326111229af7027d1d417d5dbafbde1540d5d1dc70bce4b023f2777b93dfdf4022027054bb9ba82d683d069917b2794b171bd2f1e702077af6e8e6a48e3aa200495012102c19a09577dca933fbc232934937de49563b77f2868a01d0a25f921c6a5b29d32ffffffff0200ca9a3b000000001976a914ef5acbda3141f7f4cbb81775b1afa46d8dde6a6e88ac934a2b22b10900001976a91461e09f468be3d08ed2b49bc6a4b8e92e84b73a1488ac000000000100000001acc5db040cac2e8292cdfe8b861f7095f377de8e8d8031bd1eba6e7d25685885010000006b48304502210095774ef147d77b4b1b091bf302b996d149d7183202c0000d6b7fae41e09e940402206bf2b3c7c15927a9dcffb176b17bbb23fa5747b95261232d551b6b11f42cc3a9012103e9c44c5388c128ee141310d48dbf51745f7fb2aeea018b215d713586ca40fb6bffffffff0200ca9a3b000000001976a9149c5781278b716c047ee60e5a3f29a98f55c5ef3f88aca77690e6b00900001976a9146918ade56abe1d0a0f2f33f888017e10f5e33e8688ac0000000001000000016792865f2f10effbe09a1f818302cdab2a663af17edb1e95eb40d4e358aa6d5c010000006b483045022100c731646b5d285f904b43f26f3f86040b21b5a9f25e9d44a60f3c040c640351c1022070aed5a5c94a89eee2c2cd4484c234c32af7993784b5c772f3c31b5261596ea30121027fb179647854b9e04f7e745d40ed412ae8397658dc223d675b411eea0eccaed8ffffffff02bba2f5aab00900001976a914339b310e1dd13fa157b174290a399b6f7db7625d88ac00ca9a3b000000001976a914ba7fc8f8ccaa75e078961c8888e98c89213d85a888ac000000000100000001a5bf4d334702570d2851c4bdf4a4709a859302f0ec9c61e01037a8a0b524c7a5000000006a47304402200327fd035357206724ac771c0f4dad530e8140c9e00f56db21a1b209f0251033022029539b1f4f360a50d087f5adbef35356f27663f44113c8185dd966da23ddeb5a012103719ae1953097622df373f1eb631794d54d28cb81ab7d59bb9cb6da5efe2c9b5dffffffff02dace5a6fb00900001976a91440fff735001b22b50468d8edecc51d3753c6ae7688ac00ca9a3b000000001976a914995f273daaa1494bbaacbe583f42d9972912829088ac000000000100000001017b37201d4f24673f9c0e18b4163afe47c2bb13cd9a7d6aa1a6f9db4d24d3fb000000006a47304402204d0fc656b86d6197904ae448681b8afe0911c085ef041437aafd4ab9f1973f68022059f2cc7a599a4e08e23b3dd42756f663c9ce6abb237963de98875951cdfd3f250121037fb305455db3509910704a8f429ea4aeff2c46bf60a8d7fdc75f07b94278e833ffffffff0200ca9a3b000000001976a914ef5acbda3141f7f4cbb81775b1afa46d8dde6a6e88aceefabf33b00900001976a91460d8dab232c50a0ab568ad0b5540d9e736967a5588ac00000000"), SER_NETWORK, PROTOCOL_VERSION);
    stream >> block;

    CBloomFilter filter(10, 0.000001, 0, BLOOM_UPDATE_ALL);
    // Match the last transaction
    filter.insert(uint256S("0x661580e3ef1bdd89e86c8a5afc440bd319e49da9d69f3123a9b12b8ad96ac7a3"));

    CMerkleBlock merkleBlock(block, filter);
    BOOST_CHECK(merkleBlock.header.GetHash() == block.GetHash());

    BOOST_CHECK(merkleBlock.vMatchedTxn.size() == 1);
    std::pair<unsigned int, uint256> pair = merkleBlock.vMatchedTxn[0];

    BOOST_CHECK(merkleBlock.vMatchedTxn[0].second == uint256S("0x661580e3ef1bdd89e86c8a5afc440bd319e49da9d69f3123a9b12b8ad96ac7a3"));
    BOOST_CHECK(merkleBlock.vMatchedTxn[0].first == 12);

    std::vector<uint256> vMatched;
    std::vector<unsigned int> vIndex;
    BOOST_CHECK(merkleBlock.txn.ExtractMatches(vMatched, vIndex) == block.hashMerkleRoot);
    BOOST_CHECK(vMatched.size() == merkleBlock.vMatchedTxn.size());
    for (unsigned int i = 0; i < vMatched.size(); i++)
        BOOST_CHECK(vMatched[i] == merkleBlock.vMatchedTxn[i].second);

    // Also match the 4th transaction
    filter.insert(uint256S("0x91c6fe252a5b44bdf5a9294a1169ca0907d0fe53ffb614d803dbdbd03d9de62a"));
    merkleBlock = CMerkleBlock(block, filter);
    BOOST_CHECK(merkleBlock.header.GetHash() == block.GetHash());

    BOOST_CHECK(merkleBlock.vMatchedTxn.size() == 2);

    BOOST_CHECK(merkleBlock.vMatchedTxn[0].second == uint256S("0x91c6fe252a5b44bdf5a9294a1169ca0907d0fe53ffb614d803dbdbd03d9de62a"));
    BOOST_CHECK(merkleBlock.vMatchedTxn[0].first == 3);

    BOOST_CHECK(merkleBlock.vMatchedTxn[1] == pair);

    BOOST_CHECK(merkleBlock.txn.ExtractMatches(vMatched, vIndex) == block.hashMerkleRoot);
    BOOST_CHECK(vMatched.size() == merkleBlock.vMatchedTxn.size());
    for (unsigned int i = 0; i < vMatched.size(); i++)
        BOOST_CHECK(vMatched[i] == merkleBlock.vMatchedTxn[i].second);
}

BOOST_AUTO_TEST_CASE(merkle_block_4_test_p2pubkey_only)
{
    // Random real mainnet block 1295 (0000001d3bdcc0d1fab90cb9b821353da5582585d1feeee709d999ff21320512)
    // With 13 txes
    CBlock block;
    CDataStream stream(ParseHex("03000000c762eb3b258c964658c738feea9f93db3ddefe5a1bf0f6bea19f0ccb15000000aa95233e089fc2faf0c66d370d32936a1f9a7ef28725c996c7552dc3f08334f6a7358b59aec8001e48d21400000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000d01000000010000000000000000000000000000000000000000000000000000000000000000ffffffff05020f050101ffffffff021d13c504000000002321033e254567ac5469ccf602aa8439aa3690e30c9add8ecb6f3ce055867b7eb95062acc7443101000000001976a9147d7a3cb519a73f67d17ec26f50ba575a407c822e88ac000000000100000001229c462e3e4345ae5cd46937af63b1020de36e94d898ea3afef7b6be7b2ce20d010000006a473044022016bb149bf67b03439f1b9297fb6cf980e10f616512f5ae24a6b71ad252b3372c0220662487af3fb5f7fe11b78460683b700d2375f1838788a95c1644ad28456c28bd012102404ca28ac01a9f948a34491e02e433198e83a118fbafbaa9b52db75cb4083f7fffffffff02f11567c3b20900001976a914caebdec3adf8f99d5ce8213c7adaeed90167cfb488ac00ca9a3b000000001976a9149c5781278b716c047ee60e5a3f29a98f55c5ef3f88ac0000000001000000013ce05b435e0b8f891cee3638b535b798887333fe8d091633e7d64289ab464d54000000006a473044022052948bfd09bfb4d4c36aa147e0fbb605b9c78f6348cd74347e10e9f62696ad8c022021e0f32acf0cad0af206db08e4c43b1a6bbbb9092b0fbac9265b41b159d249820121023aa9c8ae47ae6ee13ab96d2e84af785660dbc7e6e22c403b6a67b4fdd07585abffffffff020542cc87b20900001976a9143e77d120d3585c6b241494260cab1d3321f2067188ac00ca9a3b000000001976a914ba7fc8f8ccaa75e078961c8888e98c89213d85a888ac000000000100000001af1a67c2419ca63366fe6be93735dc641bd75bd9382a80de90cd47f39f305169000000006a47304402203a7898655915fd51685446d4beb8bf3658c491d5c7edfadf7f35db85b428210c02203c920bf7eff603a853c2f6fb1e380fa04d90f8feb0a6c74102b729cbaaffd39a0121021593d23c6ee5c8e88863db753747efc4fd421822d008b367e5cd11abd54123e2ffffffff0200ca9a3b000000001976a914995f273daaa1494bbaacbe583f42d9972912829088ac196e314cb20900001976a9143e0ea691e152bfe4bc7cea92df243e96f5049e4b88ac0000000001000000012ae69d3dd0dbdb03d814b6ff53fed00709ca69114a29a9f5bd445b2a25fec691010000006b48304502210092a28a1822cf72358e1ed934c38e9b728bd24edda955292a38d3082c9ea0b8a9022048db9e0c50dba465eb3a48378a5907f6c49fdda60758992b6141a0e256f892520121026de2041f3dbfb44e0eb356efd57a6110037fa766a8f55f787c4cf911a21c3083ffffffff0200ca9a3b000000001976a914ef5acbda3141f7f4cbb81775b1afa46d8dde6a6e88ac2d9a9610b20900001976a91456eedbf725b2dd72263ba2a46a5313aace7657e288ac000000000100000001f24c019b133c8733223bbb807ea01c2643d561ee82cb704134c825f00a84435d010000006a47304402206273d060d73514cfe436c6873bc2c475071c016116f276a0f677b8d04d840b1f0220533b3aa53587344b301b30dd8e9e3436e7f2bf339e9ad57ae5ff7488f000f1ec0121023e3fb614a8479eb0faee9d4c2f650611dddf2654f61322fcd754e7fe1b1ef6bcffffffff024cc6fbd4b10900001976a91447219483be4d5f601af119f305308544b1d1cf3f88ac00ca9a3b000000001976a9149c5781278b716c047ee60e5a3f29a98f55c5ef3f88ac000000000100000001c0246062f0f2f20d025ddbacea5704b302280802c0535257b1ecc28052c5e02e000000006a47304402201d37afd8b8d2babc92e9d7074a7752426511cb50a7a1699aca7409eb125ce22e0220591a24a6e532f1c5c32e5e1d88ec07eb729350f0a5d10d433fb19b243aeff23401210391b38899c04efc03346e45e1400f6a672c8b76c1602eca296de08597221f856dffffffff0200ca9a3b000000001976a914ba7fc8f8ccaa75e078961c8888e98c89213d85a888ac60f26099b10900001976a914563ce273ad9a4bbaec3724f292d13480bf4129b788ac0000000001000000012249ac508d394500cd5475d196be5f21c344412d12dd599200b365a765b15af8010000006a473044022060506da0ee97fae10b852d95cede4afb14072d144a245e9225cfa783169593fc022000b6da4ef93bcfdcd483494a042ca3c778674313ad97c64f23777b2f49c67883012102ddb4dc9fddb08390b508575158ded2ed8e342d73f4907564e368190589d67410ffffffff0200ca9a3b000000001976a914995f273daaa1494bbaacbe583f42d9972912829088ac7f1ec65db10900001976a914dd403efa39dc27282c05ae926529a1c2c9c9f2d388ac000000000100000001f1b041e4ec1772fd03318b68160406e3136317d6cef18c89ea2a20dd778bcb29010000006b483045022100a326111229af7027d1d417d5dbafbde1540d5d1dc70bce4b023f2777b93dfdf4022027054bb9ba82d683d069917b2794b171bd2f1e702077af6e8e6a48e3aa200495012102c19a09577dca933fbc232934937de49563b77f2868a01d0a25f921c6a5b29d32ffffffff0200ca9a3b000000001976a914ef5acbda3141f7f4cbb81775b1afa46d8dde6a6e88ac934a2b22b10900001976a91461e09f468be3d08ed2b49bc6a4b8e92e84b73a1488ac000000000100000001acc5db040cac2e8292cdfe8b861f7095f377de8e8d8031bd1eba6e7d25685885010000006b48304502210095774ef147d77b4b1b091bf302b996d149d7183202c0000d6b7fae41e09e940402206bf2b3c7c15927a9dcffb176b17bbb23fa5747b95261232d551b6b11f42cc3a9012103e9c44c5388c128ee141310d48dbf51745f7fb2aeea018b215d713586ca40fb6bffffffff0200ca9a3b000000001976a9149c5781278b716c047ee60e5a3f29a98f55c5ef3f88aca77690e6b00900001976a9146918ade56abe1d0a0f2f33f888017e10f5e33e8688ac0000000001000000016792865f2f10effbe09a1f818302cdab2a663af17edb1e95eb40d4e358aa6d5c010000006b483045022100c731646b5d285f904b43f26f3f86040b21b5a9f25e9d44a60f3c040c640351c1022070aed5a5c94a89eee2c2cd4484c234c32af7993784b5c772f3c31b5261596ea30121027fb179647854b9e04f7e745d40ed412ae8397658dc223d675b411eea0eccaed8ffffffff02bba2f5aab00900001976a914339b310e1dd13fa157b174290a399b6f7db7625d88ac00ca9a3b000000001976a914ba7fc8f8ccaa75e078961c8888e98c89213d85a888ac000000000100000001a5bf4d334702570d2851c4bdf4a4709a859302f0ec9c61e01037a8a0b524c7a5000000006a47304402200327fd035357206724ac771c0f4dad530e8140c9e00f56db21a1b209f0251033022029539b1f4f360a50d087f5adbef35356f27663f44113c8185dd966da23ddeb5a012103719ae1953097622df373f1eb631794d54d28cb81ab7d59bb9cb6da5efe2c9b5dffffffff02dace5a6fb00900001976a91440fff735001b22b50468d8edecc51d3753c6ae7688ac00ca9a3b000000001976a914995f273daaa1494bbaacbe583f42d9972912829088ac000000000100000001017b37201d4f24673f9c0e18b4163afe47c2bb13cd9a7d6aa1a6f9db4d24d3fb000000006a47304402204d0fc656b86d6197904ae448681b8afe0911c085ef041437aafd4ab9f1973f68022059f2cc7a599a4e08e23b3dd42756f663c9ce6abb237963de98875951cdfd3f250121037fb305455db3509910704a8f429ea4aeff2c46bf60a8d7fdc75f07b94278e833ffffffff0200ca9a3b000000001976a914ef5acbda3141f7f4cbb81775b1afa46d8dde6a6e88aceefabf33b00900001976a91460d8dab232c50a0ab568ad0b5540d9e736967a5588ac00000000"), SER_NETWORK, PROTOCOL_VERSION);
    stream >> block;

    CBloomFilter filter(10, 0.000001, 0, BLOOM_UPDATE_P2PUBKEY_ONLY);
    // Match the generation pubkey
    filter.insert(ParseHex("033e254567ac5469ccf602aa8439aa3690e30c9add8ecb6f3ce055867b7eb95062"));
    // ...and the output address of the 4th transaction
    filter.insert(ParseHex("995f273daaa1494bbaacbe583f42d99729128290"));

    CMerkleBlock merkleBlock(block, filter);
    BOOST_CHECK(merkleBlock.header.GetHash() == block.GetHash());

    // We should match the generation outpoint
    BOOST_CHECK(filter.contains(COutPoint(uint256S("0x8927ef1549de23475101a3bfb012355a5cd82d2e515a7c80ba9c242ff78e64b8"), 0)));
    // ... but not the 4th transaction's output (its not pay-2-pubkey)
    BOOST_CHECK(!filter.contains(COutPoint(uint256S("0x91c6fe252a5b44bdf5a9294a1169ca0907d0fe53ffb614d803dbdbd03d9de62a"), 0)));
}

BOOST_AUTO_TEST_CASE(merkle_block_4_test_update_none)
{
    // Random real mainnet block 1295 (0000001d3bdcc0d1fab90cb9b821353da5582585d1feeee709d999ff21320512)
    // With 7 txes
    CBlock block;
    CDataStream stream(ParseHex("03000000c762eb3b258c964658c738feea9f93db3ddefe5a1bf0f6bea19f0ccb15000000aa95233e089fc2faf0c66d370d32936a1f9a7ef28725c996c7552dc3f08334f6a7358b59aec8001e48d21400000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000d01000000010000000000000000000000000000000000000000000000000000000000000000ffffffff05020f050101ffffffff021d13c504000000002321033e254567ac5469ccf602aa8439aa3690e30c9add8ecb6f3ce055867b7eb95062acc7443101000000001976a9147d7a3cb519a73f67d17ec26f50ba575a407c822e88ac000000000100000001229c462e3e4345ae5cd46937af63b1020de36e94d898ea3afef7b6be7b2ce20d010000006a473044022016bb149bf67b03439f1b9297fb6cf980e10f616512f5ae24a6b71ad252b3372c0220662487af3fb5f7fe11b78460683b700d2375f1838788a95c1644ad28456c28bd012102404ca28ac01a9f948a34491e02e433198e83a118fbafbaa9b52db75cb4083f7fffffffff02f11567c3b20900001976a914caebdec3adf8f99d5ce8213c7adaeed90167cfb488ac00ca9a3b000000001976a9149c5781278b716c047ee60e5a3f29a98f55c5ef3f88ac0000000001000000013ce05b435e0b8f891cee3638b535b798887333fe8d091633e7d64289ab464d54000000006a473044022052948bfd09bfb4d4c36aa147e0fbb605b9c78f6348cd74347e10e9f62696ad8c022021e0f32acf0cad0af206db08e4c43b1a6bbbb9092b0fbac9265b41b159d249820121023aa9c8ae47ae6ee13ab96d2e84af785660dbc7e6e22c403b6a67b4fdd07585abffffffff020542cc87b20900001976a9143e77d120d3585c6b241494260cab1d3321f2067188ac00ca9a3b000000001976a914ba7fc8f8ccaa75e078961c8888e98c89213d85a888ac000000000100000001af1a67c2419ca63366fe6be93735dc641bd75bd9382a80de90cd47f39f305169000000006a47304402203a7898655915fd51685446d4beb8bf3658c491d5c7edfadf7f35db85b428210c02203c920bf7eff603a853c2f6fb1e380fa04d90f8feb0a6c74102b729cbaaffd39a0121021593d23c6ee5c8e88863db753747efc4fd421822d008b367e5cd11abd54123e2ffffffff0200ca9a3b000000001976a914995f273daaa1494bbaacbe583f42d9972912829088ac196e314cb20900001976a9143e0ea691e152bfe4bc7cea92df243e96f5049e4b88ac0000000001000000012ae69d3dd0dbdb03d814b6ff53fed00709ca69114a29a9f5bd445b2a25fec691010000006b48304502210092a28a1822cf72358e1ed934c38e9b728bd24edda955292a38d3082c9ea0b8a9022048db9e0c50dba465eb3a48378a5907f6c49fdda60758992b6141a0e256f892520121026de2041f3dbfb44e0eb356efd57a6110037fa766a8f55f787c4cf911a21c3083ffffffff0200ca9a3b000000001976a914ef5acbda3141f7f4cbb81775b1afa46d8dde6a6e88ac2d9a9610b20900001976a91456eedbf725b2dd72263ba2a46a5313aace7657e288ac000000000100000001f24c019b133c8733223bbb807ea01c2643d561ee82cb704134c825f00a84435d010000006a47304402206273d060d73514cfe436c6873bc2c475071c016116f276a0f677b8d04d840b1f0220533b3aa53587344b301b30dd8e9e3436e7f2bf339e9ad57ae5ff7488f000f1ec0121023e3fb614a8479eb0faee9d4c2f650611dddf2654f61322fcd754e7fe1b1ef6bcffffffff024cc6fbd4b10900001976a91447219483be4d5f601af119f305308544b1d1cf3f88ac00ca9a3b000000001976a9149c5781278b716c047ee60e5a3f29a98f55c5ef3f88ac000000000100000001c0246062f0f2f20d025ddbacea5704b302280802c0535257b1ecc28052c5e02e000000006a47304402201d37afd8b8d2babc92e9d7074a7752426511cb50a7a1699aca7409eb125ce22e0220591a24a6e532f1c5c32e5e1d88ec07eb729350f0a5d10d433fb19b243aeff23401210391b38899c04efc03346e45e1400f6a672c8b76c1602eca296de08597221f856dffffffff0200ca9a3b000000001976a914ba7fc8f8ccaa75e078961c8888e98c89213d85a888ac60f26099b10900001976a914563ce273ad9a4bbaec3724f292d13480bf4129b788ac0000000001000000012249ac508d394500cd5475d196be5f21c344412d12dd599200b365a765b15af8010000006a473044022060506da0ee97fae10b852d95cede4afb14072d144a245e9225cfa783169593fc022000b6da4ef93bcfdcd483494a042ca3c778674313ad97c64f23777b2f49c67883012102ddb4dc9fddb08390b508575158ded2ed8e342d73f4907564e368190589d67410ffffffff0200ca9a3b000000001976a914995f273daaa1494bbaacbe583f42d9972912829088ac7f1ec65db10900001976a914dd403efa39dc27282c05ae926529a1c2c9c9f2d388ac000000000100000001f1b041e4ec1772fd03318b68160406e3136317d6cef18c89ea2a20dd778bcb29010000006b483045022100a326111229af7027d1d417d5dbafbde1540d5d1dc70bce4b023f2777b93dfdf4022027054bb9ba82d683d069917b2794b171bd2f1e702077af6e8e6a48e3aa200495012102c19a09577dca933fbc232934937de49563b77f2868a01d0a25f921c6a5b29d32ffffffff0200ca9a3b000000001976a914ef5acbda3141f7f4cbb81775b1afa46d8dde6a6e88ac934a2b22b10900001976a91461e09f468be3d08ed2b49bc6a4b8e92e84b73a1488ac000000000100000001acc5db040cac2e8292cdfe8b861f7095f377de8e8d8031bd1eba6e7d25685885010000006b48304502210095774ef147d77b4b1b091bf302b996d149d7183202c0000d6b7fae41e09e940402206bf2b3c7c15927a9dcffb176b17bbb23fa5747b95261232d551b6b11f42cc3a9012103e9c44c5388c128ee141310d48dbf51745f7fb2aeea018b215d713586ca40fb6bffffffff0200ca9a3b000000001976a9149c5781278b716c047ee60e5a3f29a98f55c5ef3f88aca77690e6b00900001976a9146918ade56abe1d0a0f2f33f888017e10f5e33e8688ac0000000001000000016792865f2f10effbe09a1f818302cdab2a663af17edb1e95eb40d4e358aa6d5c010000006b483045022100c731646b5d285f904b43f26f3f86040b21b5a9f25e9d44a60f3c040c640351c1022070aed5a5c94a89eee2c2cd4484c234c32af7993784b5c772f3c31b5261596ea30121027fb179647854b9e04f7e745d40ed412ae8397658dc223d675b411eea0eccaed8ffffffff02bba2f5aab00900001976a914339b310e1dd13fa157b174290a399b6f7db7625d88ac00ca9a3b000000001976a914ba7fc8f8ccaa75e078961c8888e98c89213d85a888ac000000000100000001a5bf4d334702570d2851c4bdf4a4709a859302f0ec9c61e01037a8a0b524c7a5000000006a47304402200327fd035357206724ac771c0f4dad530e8140c9e00f56db21a1b209f0251033022029539b1f4f360a50d087f5adbef35356f27663f44113c8185dd966da23ddeb5a012103719ae1953097622df373f1eb631794d54d28cb81ab7d59bb9cb6da5efe2c9b5dffffffff02dace5a6fb00900001976a91440fff735001b22b50468d8edecc51d3753c6ae7688ac00ca9a3b000000001976a914995f273daaa1494bbaacbe583f42d9972912829088ac000000000100000001017b37201d4f24673f9c0e18b4163afe47c2bb13cd9a7d6aa1a6f9db4d24d3fb000000006a47304402204d0fc656b86d6197904ae448681b8afe0911c085ef041437aafd4ab9f1973f68022059f2cc7a599a4e08e23b3dd42756f663c9ce6abb237963de98875951cdfd3f250121037fb305455db3509910704a8f429ea4aeff2c46bf60a8d7fdc75f07b94278e833ffffffff0200ca9a3b000000001976a914ef5acbda3141f7f4cbb81775b1afa46d8dde6a6e88aceefabf33b00900001976a91460d8dab232c50a0ab568ad0b5540d9e736967a5588ac00000000"), SER_NETWORK, PROTOCOL_VERSION);
    stream >> block;

    CBloomFilter filter(10, 0.000001, 0, BLOOM_UPDATE_NONE);
    // Match the generation pubkey
    filter.insert(ParseHex("033e254567ac5469ccf602aa8439aa3690e30c9add8ecb6f3ce055867b7eb95062"));
    // ...and the output address of the 4th transaction
    filter.insert(ParseHex("995f273daaa1494bbaacbe583f42d99729128290"));

    CMerkleBlock merkleBlock(block, filter);
    BOOST_CHECK(merkleBlock.header.GetHash() == block.GetHash());

    // We shouldn't match any outpoints (UPDATE_NONE)
    BOOST_CHECK(!filter.contains(COutPoint(uint256S("0x8927ef1549de23475101a3bfb012355a5cd82d2e515a7c80ba9c242ff78e64b8"), 0)));
    BOOST_CHECK(!filter.contains(COutPoint(uint256S("0x91c6fe252a5b44bdf5a9294a1169ca0907d0fe53ffb614d803dbdbd03d9de62a"), 0)));
}

static std::vector<unsigned char> RandomData()
{
    uint256 r = InsecureRand256();
    return std::vector<unsigned char>(r.begin(), r.end());
}

BOOST_AUTO_TEST_CASE(rolling_bloom)
{
    SeedInsecureRand(/* deterministic */ true);
    g_mock_deterministic_tests = true;

    // last-100-entry, 1% false positive:
    CRollingBloomFilter rb1(100, 0.01);

    // Overfill:
    static const int DATASIZE=399;
    std::vector<unsigned char> data[DATASIZE];
    for (int i = 0; i < DATASIZE; i++) {
        data[i] = RandomData();
        rb1.insert(data[i]);
    }
    // Last 100 guaranteed to be remembered:
    for (int i = 299; i < DATASIZE; i++) {
        BOOST_CHECK(rb1.contains(data[i]));
    }

    // false positive rate is 1%, so we should get about 100 hits if
    // testing 10,000 random keys. We get worst-case false positive
    // behavior when the filter is as full as possible, which is
    // when we've inserted one minus an integer multiple of nElement*2.
    unsigned int nHits = 0;
    for (int i = 0; i < 10000; i++) {
        if (rb1.contains(RandomData()))
            ++nHits;
    }
    // Expect about 100 hits
    BOOST_CHECK_EQUAL(nHits, 75);

    BOOST_CHECK(rb1.contains(data[DATASIZE-1]));
    rb1.reset();
    BOOST_CHECK(!rb1.contains(data[DATASIZE-1]));

    // Now roll through data, make sure last 100 entries
    // are always remembered:
    for (int i = 0; i < DATASIZE; i++) {
        if (i >= 100)
            BOOST_CHECK(rb1.contains(data[i-100]));
        rb1.insert(data[i]);
        BOOST_CHECK(rb1.contains(data[i]));
    }

    // Insert 999 more random entries:
    for (int i = 0; i < 999; i++) {
        std::vector<unsigned char> d = RandomData();
        rb1.insert(d);
        BOOST_CHECK(rb1.contains(d));
    }
    // Sanity check to make sure the filter isn't just filling up:
    nHits = 0;
    for (int i = 0; i < DATASIZE; i++) {
        if (rb1.contains(data[i]))
            ++nHits;
    }
    // Expect about 5 false positives
    BOOST_CHECK_EQUAL(nHits, 6);

    // last-1000-entry, 0.01% false positive:
    CRollingBloomFilter rb2(1000, 0.001);
    for (int i = 0; i < DATASIZE; i++) {
        rb2.insert(data[i]);
    }
    // ... room for all of them:
    for (int i = 0; i < DATASIZE; i++) {
        BOOST_CHECK(rb2.contains(data[i]));
    }
    g_mock_deterministic_tests = false;
}

BOOST_AUTO_TEST_SUITE_END()
